// エッジケースとテスト用の例

// 境界値のテスト
fn boundary_values() -> i32 {
    let zero: i32 = 0;
    let positive_one: i32 = 1;
    let negative_one: i32 = -1;
    let large_positive: i32 = 2147483647; // i32の最大値に近い
    let large_negative: i32 = -2147483647; // i32の最小値に近い
    
    zero + positive_one + negative_one
}

// オーバーフローのテスト（簡易）
fn overflow_test() -> i32 {
    let large1: i32 = 1000000;
    let large2: i32 = 2000;
    
    // 小さな値で安全な計算
    large1 / large2
}

// ゼロ除算の回避
fn safe_division(numerator: i32, denominator: i32) -> i32 {
    if denominator == 0 {
        0  // ゼロ除算を避けてデフォルト値を返す
    } else {
        numerator / denominator
    }
}

// 深いネストのテスト
fn deep_nesting(depth: i32) -> i32 {
    if depth <= 0 {
        0
    } else {
        if depth == 1 {
            1
        } else {
            if depth == 2 {
                2
            } else {
                if depth == 3 {
                    3
                } else {
                    if depth == 4 {
                        4
                    } else {
                        5  // 5以上
                    }
                }
            }
        }
    }
}

// 複雑な条件のテスト
fn complex_condition_test(a: i32, b: i32, c: i32, d: i32) -> bool {
    let condition1: bool = (a > b) && (c < d);
    let condition2: bool = (a == c) || (b == d);
    let condition3: bool = !(a < 0 || b < 0 || c < 0 || d < 0);
    
    (condition1 || condition2) && condition3
}

// 変数の再代入テスト
fn variable_reassignment_test() -> i32 {
    var value: i32 = 10;
    value = value + 5;
    value = value * 2;
    value = value - 3;
    value = value / 2;
    value
}

// 短絡評価のテスト
fn short_circuit_evaluation(x: i32) -> bool {
    let safe_condition: bool = x != 0;
    
    // 短絡評価に依存（xが0でない場合のみ除算が実行される）
    if safe_condition {
        (100 / x) > 10
    } else {
        false
    }
}

// 型の互換性テスト
fn type_compatibility_test() -> bool {
    let int_val: i32 = 42;
    let bool_val: bool = true;
    
    // 型の比較とキャスト（現在は限定的）
    if int_val > 0 {
        bool_val
    } else {
        !bool_val
    }
}

// パフォーマンステスト（計算集約的）
fn performance_test() -> i32 {
    var result: i32 = 1;
    var i: i32 = 1;
    
    // 手動で10回のループをシミュレート
    result = result + i * i;
    i = i + 1;
    
    result = result + i * i;
    i = i + 1;
    
    result = result + i * i;
    i = i + 1;
    
    result = result + i * i;
    i = i + 1;
    
    result = result + i * i;
    
    result
}